*****************Q-1.  Write a program to solve the 0-1 knapsack problem. **************************


#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

// Function to solve the 0-1 Knapsack problem
int knapsack(int W, const vector<int>& weights, const vector<int>& values) {
    int n = weights.size();
    vector<vector<int>> dp(n + 1, vector<int>(W + 1, 0));

    // Build the dp array
    for (int i = 1; i <= n; i++) {
        for (int w = 0; w <= W; w++) {
            if (weights[i - 1] <= w) {
                dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weights[i - 1]] + values[i - 1]);
            } else {
                dp[i][w] = dp[i - 1][w];
            }
        }
    }

    // The maximum value that can be obtained with the given weight limit
    return dp[n][W];
}

int main() {
    int W = 50; // Maximum weight the knapsack can carry
    vector<int> weights = {10, 20, 30}; // Weights of the items
    vector<int> values = {60, 100, 120}; // Values of the items

    int maxValue = knapsack(W, weights, values);
    cout << "Maximum value in Knapsack: " << maxValue << endl;

    return 0;
}
