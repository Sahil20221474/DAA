########## WITHOUT COMPARISON ################



#include <iostream>
using namespace std;


void heapify(int arr[], int N, int i)
{
    int largest = i;
    int l = 2 * i + 1;
    int r = 2 * i + 2;

  
    if (l < N && arr[l] > arr[largest])
        largest = l;

   
    if (r < N && arr[r] > arr[largest])
        largest = r;

   
    if (largest != i) {
        swap(arr[i], arr[largest]);

        heapify(arr, N, largest);
    }
}

void heapSort(int arr[], int N)
{

    for (int i = N / 2 - 1; i >= 0; i--)
        heapify(arr, N, i);

    for (int i = N - 1; i > 0; i--) {

        swap(arr[0], arr[i]);

        heapify(arr, i, 0);
    }
}


void printArray(int arr[], int N)
{
    for (int i = 0; i < N; ++i)
        cout << arr[i] << " ";
    cout << "\n";
}

int main()
{
    int arr[] = { 12, 11, 13, 5, 6, 7 };
    int N = sizeof(arr) / sizeof(arr[0]);

    cout << "Given array is \n";
    printArray(arr, N);

    heapSort(arr, N);

    cout << "Sorted array is \n";
    printArray(arr, N);
}



*************Q-1. Write a program to sort the elements of an array using Heap Sort (The program
should report the number of comparisons).****************



#include <iostream>
using namespace std;

class HeapSort {
private:
    int comparisons;

    void heapify(int arr[], int n, int i) {
        int largest = i; // Initialize largest as root
        int left = 2 * i + 1; // left = 2*i + 1
        int right = 2 * i + 2; // right = 2*i + 2

        // Compare left child with root
        if (left < n) {
            comparisons++;
            if (arr[left] > arr[largest])
                largest = left;
        }

        // Compare right child with largest so far
        if (right < n) {
            comparisons++;
            if (arr[right] > arr[largest])
                largest = right;
        }

        // Swap and continue heapifying if root is not largest
        if (largest != i) {
            swap(arr[i], arr[largest]);
            heapify(arr, n, largest);
        }
    }

    void buildHeap(int arr[], int n) {
        // Build a maxheap
        for (int i = n / 2 - 1; i >= 0; i--)
            heapify(arr, n, i);
    }

public:
    HeapSort() : comparisons(0) {}

    void sort(int arr[], int n) {
        buildHeap(arr, n);

        // One by one extract an element from heap
        for (int i = n - 1; i > 0; i--) {
            // Move current root to end
            swap(arr[0], arr[i]);

            // Call max heapify on the reduced heap
            heapify(arr, i, 0);
        }
    }

    int getComparisons() const {
        return comparisons;
    }
};

// Function to print an array
void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++)
        cout << arr[i] << " ";
    cout << endl;
}

int main() {
    int arr[] = {12, 11, 13, 5, 6, 7};
    int n = sizeof(arr) / sizeof(arr[0]);

    cout << "Original array: " << endl;
    printArray(arr, n);

    HeapSort heapSort;
    heapSort.sort(arr, n);

    cout << "Sorted array: " << endl;
    printArray(arr, n);

    cout << "Number of comparisons: " << heapSort.getComparisons() << endl;

    return 0;
}

