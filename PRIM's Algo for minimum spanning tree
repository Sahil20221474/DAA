****************Q-1. Write a program to determine a minimum spanning tree of a graph using the Primâ€™s
algorithm. **********************


#include <iostream>
#include <vector>
#include <climits>
#include <queue>

using namespace std;

typedef pair<int, int> Edge; // (weight, vertex)

// Function to find the MST using Prim's algorithm
void primMST(vector<vector<Edge>>& graph) {
    int V = graph.size();
    vector<int> key(V, INT_MAX); // Key values used to pick minimum weight edge in cut
    vector<int> parent(V, -1); // Array to store constructed MST
    vector<bool> inMST(V, false); // To represent set of vertices not yet included in MST

    // Priority queue to pick minimum weight edge
    priority_queue<Edge, vector<Edge>, greater<Edge>> pq;

    // Starting with the first vertex (vertex 0)
    key[0] = 0;
    pq.push({0, 0}); // (key, vertex)

    while (!pq.empty()) {
        int u = pq.top().second;
        pq.pop();

        if (inMST[u])
            continue;

        inMST[u] = true; // Include vertex u in MST

        // Update key values of the adjacent vertices of the picked vertex
        for (auto& [weight, v] : graph[u]) {
            if (!inMST[v] && weight < key[v]) {
                key[v] = weight;
                pq.push({key[v], v});
                parent[v] = u;
            }
        }
    }

    // Print the constructed MST
    cout << "Edge \tWeight\n";
    for (int i = 1; i < V; ++i)
        cout << parent[i] << " - " << i << "\t" << key[i] << "\n";
}

int main() {
    int V = 5; // Number of vertices in the graph
    vector<vector<Edge>> graph(V);

    // Graph edges (example graph)
    graph[0].push_back({2, 1});
    graph[0].push_back({3, 3});
    graph[1].push_back({2, 0});
    graph[1].push_back({3, 2});
    graph[1].push_back({4, 3});
    graph[2].push_back({3, 1});
    graph[2].push_back({1, 3});
    graph[2].push_back({6, 4});
    graph[3].push_back({3, 0});
    graph[3].push_back({4, 1});
    graph[3].push_back({1, 2});
    graph[3].push_back({5, 4});
    graph[4].push_back({6, 2});
    graph[4].push_back({5, 3});

    primMST(graph);

    return 0;
}
